/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Topic } from "./Topic";
import { TopicCountArgs } from "./TopicCountArgs";
import { TopicFindManyArgs } from "./TopicFindManyArgs";
import { TopicFindUniqueArgs } from "./TopicFindUniqueArgs";
import { CreateTopicArgs } from "./CreateTopicArgs";
import { UpdateTopicArgs } from "./UpdateTopicArgs";
import { DeleteTopicArgs } from "./DeleteTopicArgs";
import { QuestionFindManyArgs } from "../../question/base/QuestionFindManyArgs";
import { Question } from "../../question/base/Question";
import { RecommendationFindManyArgs } from "../../recommendation/base/RecommendationFindManyArgs";
import { Recommendation } from "../../recommendation/base/Recommendation";
import { Subject } from "../../subject/base/Subject";
import { TopicService } from "../topic.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Topic)
export class TopicResolverBase {
  constructor(
    protected readonly service: TopicService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Topic",
    action: "read",
    possession: "any",
  })
  async _topicsMeta(
    @graphql.Args() args: TopicCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Topic])
  @nestAccessControl.UseRoles({
    resource: "Topic",
    action: "read",
    possession: "any",
  })
  async topics(@graphql.Args() args: TopicFindManyArgs): Promise<Topic[]> {
    return this.service.topics(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Topic, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Topic",
    action: "read",
    possession: "own",
  })
  async topic(
    @graphql.Args() args: TopicFindUniqueArgs
  ): Promise<Topic | null> {
    const result = await this.service.topic(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Topic)
  @nestAccessControl.UseRoles({
    resource: "Topic",
    action: "create",
    possession: "any",
  })
  async createTopic(@graphql.Args() args: CreateTopicArgs): Promise<Topic> {
    return await this.service.createTopic({
      ...args,
      data: {
        ...args.data,

        subject: args.data.subject
          ? {
              connect: args.data.subject,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Topic)
  @nestAccessControl.UseRoles({
    resource: "Topic",
    action: "update",
    possession: "any",
  })
  async updateTopic(
    @graphql.Args() args: UpdateTopicArgs
  ): Promise<Topic | null> {
    try {
      return await this.service.updateTopic({
        ...args,
        data: {
          ...args.data,

          subject: args.data.subject
            ? {
                connect: args.data.subject,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Topic)
  @nestAccessControl.UseRoles({
    resource: "Topic",
    action: "delete",
    possession: "any",
  })
  async deleteTopic(
    @graphql.Args() args: DeleteTopicArgs
  ): Promise<Topic | null> {
    try {
      return await this.service.deleteTopic(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Question], { name: "questions" })
  @nestAccessControl.UseRoles({
    resource: "Question",
    action: "read",
    possession: "any",
  })
  async findQuestions(
    @graphql.Parent() parent: Topic,
    @graphql.Args() args: QuestionFindManyArgs
  ): Promise<Question[]> {
    const results = await this.service.findQuestions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Recommendation], { name: "recommendations" })
  @nestAccessControl.UseRoles({
    resource: "Recommendation",
    action: "read",
    possession: "any",
  })
  async findRecommendations(
    @graphql.Parent() parent: Topic,
    @graphql.Args() args: RecommendationFindManyArgs
  ): Promise<Recommendation[]> {
    const results = await this.service.findRecommendations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Subject, {
    nullable: true,
    name: "subject",
  })
  @nestAccessControl.UseRoles({
    resource: "Subject",
    action: "read",
    possession: "any",
  })
  async getSubject(@graphql.Parent() parent: Topic): Promise<Subject | null> {
    const result = await this.service.getSubject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
