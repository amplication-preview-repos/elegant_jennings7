/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserPerformance } from "./UserPerformance";
import { UserPerformanceCountArgs } from "./UserPerformanceCountArgs";
import { UserPerformanceFindManyArgs } from "./UserPerformanceFindManyArgs";
import { UserPerformanceFindUniqueArgs } from "./UserPerformanceFindUniqueArgs";
import { CreateUserPerformanceArgs } from "./CreateUserPerformanceArgs";
import { UpdateUserPerformanceArgs } from "./UpdateUserPerformanceArgs";
import { DeleteUserPerformanceArgs } from "./DeleteUserPerformanceArgs";
import { Question } from "../../question/base/Question";
import { User } from "../../user/base/User";
import { UserPerformanceService } from "../userPerformance.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserPerformance)
export class UserPerformanceResolverBase {
  constructor(
    protected readonly service: UserPerformanceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserPerformance",
    action: "read",
    possession: "any",
  })
  async _userPerformancesMeta(
    @graphql.Args() args: UserPerformanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserPerformance])
  @nestAccessControl.UseRoles({
    resource: "UserPerformance",
    action: "read",
    possession: "any",
  })
  async userPerformances(
    @graphql.Args() args: UserPerformanceFindManyArgs
  ): Promise<UserPerformance[]> {
    return this.service.userPerformances(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserPerformance, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserPerformance",
    action: "read",
    possession: "own",
  })
  async userPerformance(
    @graphql.Args() args: UserPerformanceFindUniqueArgs
  ): Promise<UserPerformance | null> {
    const result = await this.service.userPerformance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserPerformance)
  @nestAccessControl.UseRoles({
    resource: "UserPerformance",
    action: "create",
    possession: "any",
  })
  async createUserPerformance(
    @graphql.Args() args: CreateUserPerformanceArgs
  ): Promise<UserPerformance> {
    return await this.service.createUserPerformance({
      ...args,
      data: {
        ...args.data,

        question: args.data.question
          ? {
              connect: args.data.question,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserPerformance)
  @nestAccessControl.UseRoles({
    resource: "UserPerformance",
    action: "update",
    possession: "any",
  })
  async updateUserPerformance(
    @graphql.Args() args: UpdateUserPerformanceArgs
  ): Promise<UserPerformance | null> {
    try {
      return await this.service.updateUserPerformance({
        ...args,
        data: {
          ...args.data,

          question: args.data.question
            ? {
                connect: args.data.question,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserPerformance)
  @nestAccessControl.UseRoles({
    resource: "UserPerformance",
    action: "delete",
    possession: "any",
  })
  async deleteUserPerformance(
    @graphql.Args() args: DeleteUserPerformanceArgs
  ): Promise<UserPerformance | null> {
    try {
      return await this.service.deleteUserPerformance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Question, {
    nullable: true,
    name: "question",
  })
  @nestAccessControl.UseRoles({
    resource: "Question",
    action: "read",
    possession: "any",
  })
  async getQuestion(
    @graphql.Parent() parent: UserPerformance
  ): Promise<Question | null> {
    const result = await this.service.getQuestion(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: UserPerformance
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
