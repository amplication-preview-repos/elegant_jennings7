/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ExamBoardService } from "../examBoard.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ExamBoardCreateInput } from "./ExamBoardCreateInput";
import { ExamBoard } from "./ExamBoard";
import { ExamBoardFindManyArgs } from "./ExamBoardFindManyArgs";
import { ExamBoardWhereUniqueInput } from "./ExamBoardWhereUniqueInput";
import { ExamBoardUpdateInput } from "./ExamBoardUpdateInput";
import { QuestionFindManyArgs } from "../../question/base/QuestionFindManyArgs";
import { Question } from "../../question/base/Question";
import { QuestionWhereUniqueInput } from "../../question/base/QuestionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ExamBoardControllerBase {
  constructor(
    protected readonly service: ExamBoardService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExamBoard })
  @nestAccessControl.UseRoles({
    resource: "ExamBoard",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createExamBoard(
    @common.Body() data: ExamBoardCreateInput
  ): Promise<ExamBoard> {
    return await this.service.createExamBoard({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ExamBoard] })
  @ApiNestedQuery(ExamBoardFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ExamBoard",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async examBoards(@common.Req() request: Request): Promise<ExamBoard[]> {
    const args = plainToClass(ExamBoardFindManyArgs, request.query);
    return this.service.examBoards({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExamBoard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ExamBoard",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async examBoard(
    @common.Param() params: ExamBoardWhereUniqueInput
  ): Promise<ExamBoard | null> {
    const result = await this.service.examBoard({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExamBoard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ExamBoard",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateExamBoard(
    @common.Param() params: ExamBoardWhereUniqueInput,
    @common.Body() data: ExamBoardUpdateInput
  ): Promise<ExamBoard | null> {
    try {
      return await this.service.updateExamBoard({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExamBoard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ExamBoard",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteExamBoard(
    @common.Param() params: ExamBoardWhereUniqueInput
  ): Promise<ExamBoard | null> {
    try {
      return await this.service.deleteExamBoard({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/questions")
  @ApiNestedQuery(QuestionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Question",
    action: "read",
    possession: "any",
  })
  async findQuestions(
    @common.Req() request: Request,
    @common.Param() params: ExamBoardWhereUniqueInput
  ): Promise<Question[]> {
    const query = plainToClass(QuestionFindManyArgs, request.query);
    const results = await this.service.findQuestions(params.id, {
      ...query,
      select: {
        createdAt: true,

        examBoard: {
          select: {
            id: true,
          },
        },

        id: true,
        text: true,

        topic: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        year: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questions")
  @nestAccessControl.UseRoles({
    resource: "ExamBoard",
    action: "update",
    possession: "any",
  })
  async connectQuestions(
    @common.Param() params: ExamBoardWhereUniqueInput,
    @common.Body() body: QuestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questions: {
        connect: body,
      },
    };
    await this.service.updateExamBoard({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questions")
  @nestAccessControl.UseRoles({
    resource: "ExamBoard",
    action: "update",
    possession: "any",
  })
  async updateQuestions(
    @common.Param() params: ExamBoardWhereUniqueInput,
    @common.Body() body: QuestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questions: {
        set: body,
      },
    };
    await this.service.updateExamBoard({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questions")
  @nestAccessControl.UseRoles({
    resource: "ExamBoard",
    action: "update",
    possession: "any",
  })
  async disconnectQuestions(
    @common.Param() params: ExamBoardWhereUniqueInput,
    @common.Body() body: QuestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questions: {
        disconnect: body,
      },
    };
    await this.service.updateExamBoard({
      where: params,
      data,
      select: { id: true },
    });
  }
}
