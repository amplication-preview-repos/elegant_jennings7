/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ExamBoard } from "./ExamBoard";
import { ExamBoardCountArgs } from "./ExamBoardCountArgs";
import { ExamBoardFindManyArgs } from "./ExamBoardFindManyArgs";
import { ExamBoardFindUniqueArgs } from "./ExamBoardFindUniqueArgs";
import { CreateExamBoardArgs } from "./CreateExamBoardArgs";
import { UpdateExamBoardArgs } from "./UpdateExamBoardArgs";
import { DeleteExamBoardArgs } from "./DeleteExamBoardArgs";
import { QuestionFindManyArgs } from "../../question/base/QuestionFindManyArgs";
import { Question } from "../../question/base/Question";
import { ExamBoardService } from "../examBoard.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ExamBoard)
export class ExamBoardResolverBase {
  constructor(
    protected readonly service: ExamBoardService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ExamBoard",
    action: "read",
    possession: "any",
  })
  async _examBoardsMeta(
    @graphql.Args() args: ExamBoardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ExamBoard])
  @nestAccessControl.UseRoles({
    resource: "ExamBoard",
    action: "read",
    possession: "any",
  })
  async examBoards(
    @graphql.Args() args: ExamBoardFindManyArgs
  ): Promise<ExamBoard[]> {
    return this.service.examBoards(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ExamBoard, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ExamBoard",
    action: "read",
    possession: "own",
  })
  async examBoard(
    @graphql.Args() args: ExamBoardFindUniqueArgs
  ): Promise<ExamBoard | null> {
    const result = await this.service.examBoard(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExamBoard)
  @nestAccessControl.UseRoles({
    resource: "ExamBoard",
    action: "create",
    possession: "any",
  })
  async createExamBoard(
    @graphql.Args() args: CreateExamBoardArgs
  ): Promise<ExamBoard> {
    return await this.service.createExamBoard({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExamBoard)
  @nestAccessControl.UseRoles({
    resource: "ExamBoard",
    action: "update",
    possession: "any",
  })
  async updateExamBoard(
    @graphql.Args() args: UpdateExamBoardArgs
  ): Promise<ExamBoard | null> {
    try {
      return await this.service.updateExamBoard({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExamBoard)
  @nestAccessControl.UseRoles({
    resource: "ExamBoard",
    action: "delete",
    possession: "any",
  })
  async deleteExamBoard(
    @graphql.Args() args: DeleteExamBoardArgs
  ): Promise<ExamBoard | null> {
    try {
      return await this.service.deleteExamBoard(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Question], { name: "questions" })
  @nestAccessControl.UseRoles({
    resource: "Question",
    action: "read",
    possession: "any",
  })
  async findQuestions(
    @graphql.Parent() parent: ExamBoard,
    @graphql.Args() args: QuestionFindManyArgs
  ): Promise<Question[]> {
    const results = await this.service.findQuestions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
